w = (p**a / (p**a + (1-p)**a)**(1-a))
}
## use the functions:
est_param <- function(fun, num_a, num_p) {
a = seq(0, 1, by = num_a)
p = seq(0, 1, by = num_p)
df <- tibble(affect = numeric(),
probability = numeric(),
utility = numeric())
for(aff in a){
value = sapply(p, fun, a = aff)
df = rbind(df,
tibble(affect = rep(aff, length(p)),
probability = p,
utility = value))
}
return(df)
}
rot <- est_param(rottenstreich, 0.1, 0.01)
wuGon <- est_param(rottenstreich, 0.1, 0.01)
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}}, group = {{group}}, color = {{group}})) +
geom_line()
}
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, affect)
plotW(wuGon, probability, utility, affect)
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, affect)
plotW(wuGon, probability, utility, affect)
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, as_factor(affect))
install.packages("RColorBrewer")
p_load(tidyverse, brms, parallel, bayesplot,
RColorBrewer)
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}},
group = {{group}},
color = {{group}})) +
geom_line() +
scale_color_brewer(palette = "Dark2")
}
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, affect)
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, as_factor(affect))
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}},
group = {{group}},
color = {{group}})) +
geom_line() +
scale_color_brewer(palette = "Paired")
}
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, as_factor(affect))
plotW(wuGon, probability, utility, affect)
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, as_factor(affect))
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}},
group = {{group}},
color = {{group}})) +
geom_line()
}
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, affect)
plotW(wuGon, probability, utility, affect)
## Gonzalez / Wu 1999:
gonzWu <- function(delta, gamma, p){
w = (delta * (p ** gamma)) / (delta * (p ** gamma) + (1-p)**gamma)
#return(w)
}
est_param <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0, 1, by = num_delta)
gamma = seq(0, 1, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
est_param2 <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0, 1, by = num_delta)
gamma = seq(0, 1, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
test <- est_param2(gonzWu, 0.1, 0.1, 0.1)
View(test)
est_param2 <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0, 2, by = num_delta)
gamma = seq(0, 2, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
test <- est_param2(gonzWu, 0.01, 0.01, 0.01)
test <- est_param2(gonzWu, 0.1, 0.1, 0.1)
head(test)
two_param <- est_param2(gonzWu, 0.1, 0.1, 0.1)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(probability, utility, group = delta,
color = delta) +
geom_line
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
two_param <- est_param2(gonzWu, 0.1, 0.1, 0.01)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
est_param2 <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0.2, 1.8, by = num_delta)
gamma = seq(0.2, 1.8, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
two_param <- est_param2(gonzWu, 0.1, 0.1, 0.01)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
two_param <- est_param2(gonzWu, 0.2, 0.2, 0.001)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
two_param <- est_param2(gonzWu, 0.2, 0.2, 0.001)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
two_param <- est_param2(gonzWu,
num_delta = 0.2,
num_gamma = 0.2,
num_p = 0.001)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
library(pacman)
p_load(tidyverse)
p_load(devtools)
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.getenv("BINPREF")
install.packages("jsonlite", type = "source")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
devtools::install_github("rmcelreath/rethinking")
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
# Chunk 1
library(pacman)
p_load(tidyverse, parallel, brms)
ncores = detectCores()
setwd("C:/Users/95/BayesianDecisionWeights/Code")
# Chunk 2
readeR <- function(name){
df <- read_csv(name) %>%
rename(p = probability,
gammaT = gamma_true,
deltaT = delta_true,
gammaO = gamma_obs,
deltaO = delta_obs,
w = w_prob) %>%
mutate(ID = as_factor(ID),
item = as_factor(item))
}
df <- readeR("../Data/exp2_sim_toy.csv")
df2 <- readeR("../Data/exp2_sim_toyBIG.csv")
# Chunk 3
df_item1 <- df %>%
filter(item == 1,
w >= 0 & w <= 1) %>%
select(c(ID, p, w))
# Chunk 4
(prior <- brms::get_prior(
brms::bf(w ~ (deltaO * (p ** gammaO)) /
(deltaO * (p ** gammaO) +
(1-p)**gammaO),
gammaO ~ 1 + (1|ID),
deltaO ~ 1 + (1|ID),
nl = TRUE),
data = df_item1,
family = gaussian()))
# Chunk 5
brmsFun <- function(brm_prior, brm_df, item_nr,
filename, iter){
brm_df <- brm_df %>%
filter(item == {{item_nr}},
w >= 0 & w <= 1) %>%
select(c(ID, p, w))
## needs to be exp. & then we transfer back to log.
mod <- brms::brm(
bf(w ~ (exp(logdeltaO) * (p ** gammaO)) /
(exp(logdeltaO) * (p **gammaO) +
(1-p)**gammaO),
gammaO ~ 1 + (1|ID),
logdeltaO ~ 1 + (1|ID),
nl = TRUE),
data = brm_df,
prior = brm_prior,
chains = 6,
iter = iter,
cores = 4,
control = list(adapt_delta = 0.9),
file = filename)
}
# Chunk 6
prior1 <- c(prior(normal(0, 2),
nlpar = "logdeltaO"),
prior(normal(0.3, 1),
nlpar = "gammaO"))
prior2 <- c(prior(normal(0, 2),
nlpar = "logdeltaO"),
prior(normal(0.3, 1),
nlpar = "gammaO"))
prior3 <- c(prior(normal(0, 2),
nlpar = "logdeltaO"),
prior(normal(0.3, 1),
nlpar = "gammaO"))
mod2 <- brmsFun(brm_prior = prior2,
brm_df = df,
item_nr = 2,
filename = "../Data/m_item2_logID",
iter = 4000)
mod3 <- brmsFun(brm_prior = prior3,
brm_df = df,
item_nr = 3,
filename = "../Data/m_item3_logID",
iter = 4000)
library(pacman)
p_load(tidyverse, brms, parallel, bayesplot,
RColorBrewer, cowplot)
ncores = detectCores()
setwd("C:/Users/95/BayesianDecisionWeights/Code")
## rottenstreich
rottenstreich <- function(a, p){
w = p**(1-a) / (p**(1-a) + (1-p)**(1-a))
#return(w)
}
## wu 1996?
wu <- function(a, p){
w = (p**a / (p**a + (1-p)**a)**(1-a))
}
## use the functions:
est_param <- function(fun, num_a, num_p) {
a = seq(0, 1, by = num_a)
p = seq(0, 1, by = num_p)
df <- tibble(affect = numeric(),
probability = numeric(),
utility = numeric())
for(aff in a){
value = sapply(p, fun, a = aff)
df = rbind(df,
tibble(affect = rep(aff, length(p)),
probability = p,
utility = value))
}
return(df)
}
rot <- est_param(rottenstreich, 0.1, 0.01)
wuGon <- est_param(rottenstreich, 0.1, 0.01)
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}},
group = {{group}})) +
geom_line() +
labs(x = "p", y = "w(p)") +
coord_fixed(ratio = 1) +
theme_minimal()
}
## they are the same.. (it seems): prove it.
p1 <- plotW(rot, probability, utility, affect)
p1 <- plotW(wuGon, probability, utility, affect)
ggsave("../Figures/one_param.png")
# Chunk 1
library(pacman)
p_load(tidyverse, brms, parallel, bayesplot,
RColorBrewer, cowplot)
ncores = detectCores()
setwd("C:/Users/95/BayesianDecisionWeights/Code")
# Chunk 2
## rottenstreich
rottenstreich <- function(a, p){
w = p**(1-a) / (p**(1-a) + (1-p)**(1-a))
#return(w)
}
## wu 1996?
wu <- function(a, p){
w = (p**a / (p**a + (1-p)**a)**(1-a))
}
# Chunk 3
## use the functions:
est_param <- function(fun, num_a, num_p) {
a = seq(0, 1, by = num_a)
p = seq(0, 1, by = num_p)
df <- tibble(affect = numeric(),
probability = numeric(),
utility = numeric())
for(aff in a){
value = sapply(p, fun, a = aff)
df = rbind(df,
tibble(affect = rep(aff, length(p)),
probability = p,
utility = value))
}
return(df)
}
# Chunk 4
rot <- est_param(rottenstreich, 0.1, 0.01)
wuGon <- est_param(rottenstreich, 0.1, 0.01)
# Chunk 5
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}},
group = {{group}})) +
geom_line() +
labs(x = "p", y = "w(p)") +
coord_fixed(ratio = 1) +
theme_minimal()
}
# Chunk 6
## they are the same.. (it seems): prove it.
p1 <- plotW(rot, probability, utility, affect)
p1 <- plotW(wuGon, probability, utility, affect)
ggsave("../Figures/one_param.png")
# Chunk 7
## Gonzalez / Wu
gonzWu <- function(delta, gamma, p){
w = (delta * (p ** gamma)) / (delta * (p ** gamma) + (1-p)**gamma)
#return(w)
}
# Chunk 8
est_param2 <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0.2, 1.8, by = num_delta)
gamma = seq(0.2, 1.8, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
# Chunk 9
two_param <- est_param2(gonzWu,
num_delta = 0.2,
num_gamma = 0.2,
num_p = 0.001)
# Chunk 10
factor_param <- two_param %>%
mutate(delta = as_factor(delta),
gamma = as_factor(gamma))
# Chunk 11
plotW <- function(df, vis_param, group_param, value){
df %>%
filter({{vis_param}} == value) %>%
ggplot(aes(probability, utility, group = {{group_param}}),
color = {{group_param}}) +
geom_abline(intercept = 0, slope = 1) +
geom_line() +
labs(x = "p", y = "w(p)") +
coord_fixed(ratio = 1) +
#xlim(0, 1) +
#ylim(0, 1) +
theme_minimal()
}
# Chunk 12
p2 <- plotW(df = two_param,
vis_param = gamma,
group_param = delta,
value = "0.6")
p3 <- plotW(df = two_param,
vis_param = delta,
group_param = gamma,
value = "0.6")
#p2: high gamma = a lot of curvature.
#p3: high delta = high attractiveness?
# Chunk 13
est_param3 <- function(fun, delta, gamma, num_p) {
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
# Chunk 14
delta = c(0.77, 0.77, 0.77)
gamma = c(0.22, 0.44, 0.64)
Gonzalez_param <- est_param3(gonzWu,
delta = delta,
gamma = gamma,
num_p = 0.001)
# Chunk 15
plotG <- function(df, group_param){
df %>%
ggplot(aes(probability, utility, group = {{group_param}}),
color = {{group_param}}) +
geom_abline(intercept = 0, slope = 1) +
geom_line() +
labs(x = "p", y = "w(p)") +
#xlim(0, 1) +
#ylim(0, 1) +
coord_fixed(ratio = 1) +
theme_minimal()
}
p4 <- plotG(Gonzalez_param, gamma)
ggsave("../Figures/our_hyp.png")
