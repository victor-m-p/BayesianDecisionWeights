interval_plot <- function(df, variable){
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
labs(x = "Gamma estimate",
y = "Condition (items)") +
stat_halfeye()
}
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
View(posts_clean)
View(posts_melt)
View(posts_melt)
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed") %>%
recode(level,
item1 = "A",
item2 = "B",
item3 = "C")
posts_melt %>%
recode(level,
item1 = "A",
item2 = "B",
item3 = "C")
posts_melt %>%
revalue(level,
item1 = "A",
item2 = "B",
item3 = "C")
posts_melt %>%
plyr::revalue(level,
item1 = "A",
item2 = "B",
item3 = "C")
posts_melt %>%
plyr::revalue(level, c(item1 = "A",
item2 = "B",
item3 = "C"))
posts_melt %>%
mutate(level = as_factor(level),
variable = as_factor(variable)) %>%
plyr::revalue(level, c(item1 = "A",
item2 = "B",
item3 = "C"))
posts_melt %>%
mutate(level = as_factor(level),
variable = as_factor(variable)) %>%
plyr::revalue(level, c(item1 = "A",
item2 = "B",
item3 = "C"))
posts_melt %>%
mutate(level = as_factor(level),
variable = as_factor(variable))
posts_melt <- posts_melt %>%
mutate(level = as_factor(level),
variable = as_factor(variable))
posts_melt %>%
plyr::revalue(level, c(item1 = "A",
item2 = "B",
item3 = "C"))
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed")
posts_melt %>%
plyr::revalue(level, c("item1" = "A",
"item2" = "B",
"item3" = "C"))
posts_melt %>%
fct_recode(level,
A = "item1",
B = "item2",
C = "item3")
posts_melt <- posts_melt %>%
mutate(level = as_factor(level),
variable = as_factor(variable))
posts_melt %>%
fct_recode(level,
A = "item1",
B = "item2",
C = "item3")
# Chunk 1
library(pacman)
p_load(tidyverse, brms)
setwd("C:/Users/95/BayesianDecisionWeights/Code")
# Chunk 2
mod <- readRDS("../Data/fit_simulated.rds")
# Chunk 3
pp_check(mod) #show good fit.
(res1 <- summary(mod)) #shows sensible values.
plot(mod)
#http://mjskay.github.io/tidybayes/articles/tidy-brms.html
devtools::install_github("mjskay/tidybayes")
library(tidybayes)
## sample posterior
posts <- posterior_samples(mod)
## data wrangling:
posts_clean <- posts %>%
mutate(b_deltaO_item1 = exp(b_logdeltaO_item1),
b_deltaO_item2 = exp(b_logdeltaO_item2),
b_deltaO_item3 = exp(b_logdeltaO_item3)) %>%
select(c(
b_gammaO_item1,
b_gammaO_item2,
b_gammaO_item3,
b_deltaO_item1,
b_deltaO_item2,
b_deltaO_item3
))
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed")
posts_melt %>%
fct_recode(level,
A = "item1",
B = "item2",
C = "item3")
posts_melt %>%
recode(level,
A = "item1",
B = "item2",
C = "item3")
posts_melt %>%
mutate(level = fct_recode(
A = "item1",
B = "item2",
C = "item3"))
posts_melt %>%
mutate(level = fct_recode(level
A = "item1",
B = "item2",
C = "item3"))
posts_melt %>%
mutate(level = fct_recode(level,
A = "item1",
B = "item2",
C = "item3"))
# Chunk 1
library(pacman)
p_load(tidyverse, brms)
setwd("C:/Users/95/BayesianDecisionWeights/Code")
# Chunk 2
mod <- readRDS("../Data/fit_simulated.rds")
# Chunk 3
pp_check(mod) #show good fit.
(res1 <- summary(mod)) #shows sensible values.
plot(mod)
# Chunk 4
#http://mjskay.github.io/tidybayes/articles/tidy-brms.html
library(tidybayes)
## sample posterior
posts <- posterior_samples(mod)
## data wrangling:
posts_clean <- posts %>%
mutate(b_deltaO_item1 = exp(b_logdeltaO_item1),
b_deltaO_item2 = exp(b_logdeltaO_item2),
b_deltaO_item3 = exp(b_logdeltaO_item3)) %>%
select(c(
b_gammaO_item1,
b_gammaO_item2,
b_gammaO_item3,
b_deltaO_item1,
b_deltaO_item2,
b_deltaO_item3
))
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed")
posts_melt %>%
mutate(level = fct_recode(level,
A = "item1",
B = "item2",
C = "item3"))
## use the melted data to get 95% CI.
posts_melt %>%
group_by(variable, level) %>%
median_qi(cond_mean = observed)
## visualize this for gamma and delta
## .95, .66 posterior mass.
interval_plot <- function(df, variable){
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
labs(x = "Gamma estimate",
y = "Condition (items)") +
stat_halfeye()
}
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
ggsave("../Figures/gamma.png")
interval_plot(posts_melt, "delta") #hmm?
## he has one more nice plot with coloring:
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
# Chunk 1
library(pacman)
p_load(tidyverse, brms)
setwd("C:/Users/95/BayesianDecisionWeights/Code")
# Chunk 2
mod <- readRDS("../Data/fit_simulated.rds")
# Chunk 3
pp_check(mod) #show good fit.
(res1 <- summary(mod)) #shows sensible values.
plot(mod)
# Chunk 4
#http://mjskay.github.io/tidybayes/articles/tidy-brms.html
library(tidybayes)
## sample posterior
posts <- posterior_samples(mod)
## data wrangling:
posts_clean <- posts %>%
mutate(b_deltaO_item1 = exp(b_logdeltaO_item1),
b_deltaO_item2 = exp(b_logdeltaO_item2),
b_deltaO_item3 = exp(b_logdeltaO_item3)) %>%
select(c(
b_gammaO_item1,
b_gammaO_item2,
b_gammaO_item3,
b_deltaO_item1,
b_deltaO_item2,
b_deltaO_item3
))
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed")
posts_melt <- posts_melt %>%
mutate(level = fct_recode(level,
A = "item1",
B = "item2",
C = "item3"))
## use the melted data to get 95% CI.
posts_melt %>%
group_by(variable, level) %>%
median_qi(cond_mean = observed)
## visualize this for gamma and delta
## .95, .66 posterior mass.
interval_plot <- function(df, variable){
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
labs(x = "Gamma estimate",
y = "Condition (items)") +
stat_halfeye()
}
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
ggsave("../Figures/gamma.png")
interval_plot(posts_melt, "delta") #hmm?
## he has one more nice plot with coloring:
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
labs(x = "Gamma estimate",
y = "Condition (items)") +
stat_halfeye() +
theme_minimal()
## visualize this for gamma and delta
## .95, .66 posterior mass.
interval_plot <- function(df, variable){
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
labs(x = "Gamma estimate",
y = "Condition (items)") +
stat_halfeye() +
theme_minimal()
}
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
ggsave("../Figures/gamma.png")
interval_plot(posts_melt, "delta") #hmm?
# Chunk 1
library(pacman)
p_load(tidyverse, wesanderson)
# Chunk 2
df <- read_csv("../Data/exp2_simulation.csv") %>%
rename(p = probability,
gammaT = gamma_true,
deltaT = delta_true,
gammaO = gamma_obs,
deltaO = delta_obs,
w = w_prob) %>%
mutate(ID = as_factor(ID),
item = as_factor(item))
# Chunk 3
ggplot(df, aes(x = item, y = gammaO)) +
geom_boxplot(aes(fill = item),
alpha = 2/3, show.legend = F) +
scale_fill_manual(values = wes_palette("Darjeeling1")) +
xlab(NULL) +
ylim(0,1) +
facet_wrap(~as_factor(ID))
# Chunk 4
ggplot(df, aes(x = p, y = w,
color = as_factor(gammaT))) +
geom_point(alpha = 0.5, size = 0.4) +
geom_smooth() +
scale_color_manual(values = wes_palette("Darjeeling1"))+
geom_abline(intercept = 0, slope = 1) +
labs(color = "gamma value", x = "p", y = "w(p)") +
xlim(0, 1) +
ylim(0, 1) +
theme_minimal()
ggsave("../Figures/simulated.png")
# Chunk 1
library(pacman)
p_load(tidyverse, brms)
setwd("C:/Users/95/BayesianDecisionWeights/Code")
# Chunk 2
mod <- readRDS("../Data/fit_simulated.rds")
# Chunk 3
pp_check(mod) #show good fit.
(res1 <- summary(mod)) #shows sensible values.
plot(mod)
# Chunk 4
#http://mjskay.github.io/tidybayes/articles/tidy-brms.html
library(tidybayes)
## sample posterior
posts <- posterior_samples(mod)
## data wrangling:
posts_clean <- posts %>%
mutate(b_deltaO_item1 = exp(b_logdeltaO_item1),
b_deltaO_item2 = exp(b_logdeltaO_item2),
b_deltaO_item3 = exp(b_logdeltaO_item3)) %>%
select(c(
b_gammaO_item1,
b_gammaO_item2,
b_gammaO_item3,
b_deltaO_item1,
b_deltaO_item2,
b_deltaO_item3
))
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed")
posts_melt <- posts_melt %>%
mutate(level = fct_recode(level,
C = "item1",
B = "item2",
A = "item3"))
## use the melted data to get 95% CI.
posts_melt %>%
group_by(variable, level) %>%
median_qi(cond_mean = observed)
## visualize this for gamma and delta
## .95, .66 posterior mass.
interval_plot <- function(df, variable){
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
labs(x = "Gamma estimate",
y = "Condition (items)") +
stat_halfeye() +
theme_minimal()
}
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
ggsave("../Figures/gamma.png")
interval_plot(posts_melt, "delta") #hmm?
## he has one more nice plot with coloring:
(res1 <- summary(mod)) #shows sensible values.
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
citation(ggplot)
citation(package = "ggplot")
citation(package = "tidyverse")
citation(package = "tidybayes")
c1 <- rnorm(20, m = 0.9, sd = 0.5)
c2 <- rnorm(20, m = 0.5, sd = 0.5)
c3 <- rnorm(20, m = 0.1, sd = 0.5)
t.test(c1, c2)
c1 <- rnorm(30, m = 0.9, sd = 0.5)
c2 <- rnorm(30, m = 0.5, sd = 0.5)
c3 <- rnorm(30, m = 0.1, sd = 0.5)
t.test(c1, c2)
c1 <- rnorm(30, m = 0.9, sd = 0.3)
c2 <- rnorm(30, m = 0.5, sd = 0.3)
c3 <- rnorm(30, m = 0.1, sd = 0.3)
t.test(c1, c2)
c1 <- rnorm(50, m = 0.9, sd = 0.5)
c2 <- rnorm(50, m = 0.5, sd = 0.5)
c3 <- rnorm(50, m = 0.1, sd = 0.5)
t.test(c1, c2)
c1 <- rnorm(40, m = 0.9, sd = 0.5)
c1 <- rnorm(40, m = 0.9, sd = 0.5)
c2 <- rnorm(40, m = 0.5, sd = 0.5)
c3 <- rnorm(40, m = 0.1, sd = 0.5)
t.test(c1, c2)
t.test(c2, c3)
plot(rnorm(40, m = 0.9, sd = 0.5))
df <- tibble(c1 = rnorm(50, m = 0.8, sd = 0.5),
c2 = rnorm(50, m = 0.8, sd = 0.5),
c3 = rnorm(50, m = 0.8, sd = 0.5))
View(df)
?melt()
library(pacman)
p_load(tidyverse, reshape2)
## set seed.
set.seed(111)
## create data
df <- tibble(c1 = rnorm(50, m = 0.8, sd = 0.5),
c2 = rnorm(50, m = 0.8, sd = 0.5),
c3 = rnorm(50, m = 0.8, sd = 0.5))
## t-test data
t.test(c1, c2)
t.test(c2, c3)
## melt data
df_melt <- melt(df)
View(df_melt)
View(df)
View(df_melt)
## plot data
df_melt %>%
ggplot(aes(variable, value)) %>%
geom_density(alpha = 0.4)
## plot data
df_melt %>%
ggplot(aes(variable, value)) +
geom_density(alpha = 0.4)
## plot data
df_melt %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.4)
## set seed.
set.seed(111)
## create data
df <- tibble(c1 = rnorm(50, m = 0.2, sd = 0.5),
c2 = rnorm(50, m = 0.5, sd = 0.5),
c3 = rnorm(50, m = 0.8, sd = 0.5))
## t-test data
t.test(c1, c2)
t.test(c2, c3)
## melt data
df_melt <- melt(df)
## plot data
df_melt %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.4)
wes_palettes()
p_load(tidyverse, reshape2, wes_palettes)
p_load(tidyverse, reshape2, wesanderson)
wes_palettes
## plot data
df_melt %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.4) +
scale_fill_manual(value = wes_palette("Darjeeling1"))
## plot data
df_melt %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.4) +
scale_fill_manual(value = wes_palette("Darjeeling1"))+
theme_minimal()
## plot data
df_melt %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = wes_palette("Darjeeling1"))+
theme_minimal()
## set seed.
set.seed(111)
## create data
df <- tibble(c1 = rnorm(30, m = 0.2, sd = 0.4),
c2 = rnorm(30, m = 0.5, sd = 0.4),
c3 = rnorm(30, m = 0.8, sd = 0.4))
## t-test data
t.test(c1, c2)
t.test(c2, c3)
## melt data
df_melt <- melt(df)
## plot data
df_melt %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = wes_palette("Darjeeling1"))+
theme_minimal()
