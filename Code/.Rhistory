df = rbind(df,
tibble(affect = rep(aff, 100),
probability = p,
utility = value))
}
df <- tibble(affect = numeric(),
probability = numeric(),
utility = numeric())
for(aff in a){
value = sapply(p, rottenstreich, a = aff)
df = rbind(df,
tibble(affect = rep(aff, 100),
probability = p,
utility = value))
}
rottenstreich <- function(a, p){
w = p**(1-a) / (p**(1-a) + (1-p)**(1-a))
return(w)
}
a = seq(0.01, 1, by = 0.1)
p = seq(1, 100, by = 1)
df <- tibble(affect = numeric(),
probability = numeric(),
utility = numeric())
for(aff in a){
value = sapply(p, rottenstreich, a = aff)
df = rbind(df,
tibble(affect = rep(aff, 100),
probability = p,
utility = value))
}
df <- tibble(affect = numeric(),
probability = numeric(),
utility = numeric())
for(aff in a){
value = sapply(p, rottenstreich, aff = aff)
df = rbind(df,
tibble(affect = rep(aff, 100),
probability = p,
utility = value))
}
df <- tibble(affect = numeric(),
probability = numeric(),
utility = numeric())
for(aff in a){
value = sapply(p, rottenstreich, a = aff)
df = rbind(df,
tibble(affect = rep(aff, 100),
probability = p,
utility = value))
}
for(aff in a){
value = sapply(p, rottenstreich, a = aff)
}
rm(aff)
rm(affect)
for(aff in a){
value = sapply(p, rottenstreich, a = aff)
}
rottenstreich <- function(a, p){
w = p**(1-a) / (p**(1-a) + (1-p)**(1-a))
#return(w)
}
rm(tibbleList)
rm(aff)
for(aff in a){
value = sapply(p, rottenstreich, a = aff)
}
?sapply
rottenstreich <- function(a, p){
w = p**(1-a) / (p**(1-a) + (1-p)**(1-a))
#return(w)
}
type(a)
lst(a)
a
str(a)
rm(a)
rm(p)
rmvalue
rm(value)
rm(aff)
library(pacman)
p_load(tidyverse)
rottenstreich <- function(a, p){
w = p**(1-a) / (p**(1-a) + (1-p)**(1-a))
#return(w)
}
var_a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 1)
for(a in var_a){
value = sapply(var_p, rottenstreich, a = a)
}
rottenstreich <- function(a, p){
w = p**(1-a) / (p**(1-a) + (1-p)**(1-a))
#return(w)
}
var_a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 1)
for(one_p in var_p){
value = sapply(var_a, rottenstreich, p = one_p)
}
var_a = list(seq(0.01, 1, by = 0.1))
var_p = seq(1, 100, by = 1)
var_a = list(seq(0.01, 1, by = 0.1))
var_p = seq(1, 100, by = 1)
for(one_p in var_p){
value = sapply(var_a, rottenstreich, p = one_p)
}
View(value)
var_a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 1)
View(value)
var_a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 1)
var_a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 10)
a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 10)
for(one_p in var_p){
value = sapply(a, rottenstreich, p = one_p)
}
df <- data.frame(
w = c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 0.95,
0.08, 0.12, 0.23, 0.4, 0.5, 0.8, 0.93,
0.2, 0.25, 0.30, 0.43, 0.48, 0.72, 0.92,
0.25, 0.30, 0.35, 0.45, 0.51, 0.63, 0.90),
p = c(0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99),
ID = c(rep(1, 7),
rep(2, 7),
rep(1, 7),
rep(2, 7)),
item = c(rep(1, 7),
rep(1, 7),
rep(2, 7),
rep(2, 7)),
valuence = c(rep(0.2, 7),
rep(0.2, 7),
rep(0.8, 7),
rep(0.8, 7))
)
prior1 <- prior(normal(0.5, 2), nlpar = "y") +
prior(normal(0.5, 2), nlpar = "delta")
fit1 <- brm(bf(w ~ (delta * (p ** y)) / (delta * (p **y) + (1-p)**y),
y ~ 1 + (1|ID) + (1|item),
delta ~ 1 + (1|ID) + (1|item),
nl = TRUE),
data = df, prior = prior1)
library(pacman)
p_load(tidyverse, brms)
df <- data.frame(
w = c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 0.95,
0.08, 0.12, 0.23, 0.4, 0.5, 0.8, 0.93,
0.2, 0.25, 0.30, 0.43, 0.48, 0.72, 0.92,
0.25, 0.30, 0.35, 0.45, 0.51, 0.63, 0.90),
p = c(0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99),
ID = c(rep(1, 7),
rep(2, 7),
rep(1, 7),
rep(2, 7)),
item = c(rep(1, 7),
rep(1, 7),
rep(2, 7),
rep(2, 7)),
valuence = c(rep(0.2, 7),
rep(0.2, 7),
rep(0.8, 7),
rep(0.8, 7))
)
prior1 <- prior(normal(0.5, 2), nlpar = "y") +
prior(normal(0.5, 2), nlpar = "delta")
fit1 <- brm(bf(w ~ (delta * (p ** y)) / (delta * (p **y) + (1-p)**y),
y ~ 1 + (1|ID) + (1|item),
delta ~ 1 + (1|ID) + (1|item),
nl = TRUE),
data = df, prior = prior1)
summary(fit1)
plot(fit1)
plot(conditional_effects(fit1), points = TRUE)
library(pacman)
p_load(tidyverse, brms)
library(pacman)
p_load(tidyverse, brms)
library(pacman)
p_load(tidyverse, brms, parallel, bayesplot)
ncores = detectCores()
setwd("C:/Users/95/Dropbox/MastersSem1/DecisionMaking/examCode")
#sample_prior = "only"
#posteror_predict
df = data.frame(w = rep(1, 900),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:10, each=9*10))
# values from gonzalez/wu:
# should be gamma: est: .44, SE: 0.01 (should be SD).
#
prior1 <- prior(normal(0.44, 0.01), nlpar = "gamma") +
prior(normal(0.44, 0.0001), nlpar = "delta")
## fit model based on priors:
fittedMod <- brm(bf(w ~ (delta * (p ** gamma))/(delta * (p**gamma)+(1-p)**gamma),
gamma ~ 1 + (1|ID),
delta ~ 1 + (1|ID),
nl = TRUE),
data = df, prior = prior1,
sample_prior = "only",
cores = ncores,
iter = 5000,
file = "sampleprior")
## generate data:
test <- posterior_predict(fittedMod)
View(test)
newY = predict(fittedMod, newdata = df, summary=FALSE, nsamples=1)[1,]
newY
View(df)
## Gonzalez / Wu
gonzWu <- function(delta, gamma, p){
w = (delta * (p ** gamma)) / (delta * (p ** gamma) + (1-p)**gamma)
#return(w)
}
## range of plausible values:
## delta: .77, gamma: .44 (plus, minus something).
## Gonzalez / Wu
gonzWu <- function(delta, gamma, p){
w = (delta * (p ** gamma)) / (delta * (p ** gamma) + (1-p)**gamma)
#return(w)
}
## range of plausible values:
## delta: .77, gamma: .44 (plus, minus something).
## each participant gets a random (within a small )
delta = rnorm(9, .77, 0.10)
min(delta)
max(delta)
gamma = rnorm(9, .44, 0.01)
df = data.frame(w = rep(1, 900),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:10, each=9*10))
## each participant gets a random (within a small )
delta = rnorm(9, .77, 0.10)
gamma = rnorm(9, .44, 0.01)
df = data.frame(w = rep(1, 900),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:10, each=9*10),
gamma = rep(rnorm(90, .44, 0.01), 90),
delta = rep(rnorm(90, .77, 0.01), 90))
View(df)
df = data.frame(w = rep(1, 900),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:10, each=9*10),
gamma = rep(rnorm(90, .44, 0.01), 10),
delta = rep(rnorm(90, .77, 0.01), 10))
View(df)
df = data.frame(w = rep(1, 900),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:10, each=9*10),
gamma = rep(rnorm(10, .44, 0.01), 90),
delta = rep(rnorm(10, .77, 0.01), 90))
View(df)
df = data.frame(w = rep(1, 900),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:10, each=9*10),
gamma = rep(rep(rnorm(.44, 0.01), 90), 10),
delta = rep(rnorm(10, .77, 0.01), 90))
rep(rep(1, 10), 10)
df = data.frame(w = rep(1, 900),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:10, each=9*10),
gamma = rep(rep(rnorm(1, .44, 0.01), 90), 10),
delta = rep(rnorm(10, .77, 0.01), 90))
View(df)
participants = 10
values_p = 9
df = data.frame(w = rep(1, participants*values_p),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:participants, each = values_p*participants),
gamma = rep(rnorm(participants, .44, 0.01),
each = values_p),
delta = rep(rnorm(participants, .77, 0.01),
each = values_p))
View(df)
participants = 10
values_p = 9
df = data.frame(w = rep(1, participants*values_p),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
100),
ID = rep(1:participants, each = values_p*participants),
gamma = rep(rnorm(participants, .44, 0.01),
each = values_p*participants),
delta = rep(rnorm(participants, .77, 0.01),
each = values_p*participants))
View(df)
items = 1
participants = 10
values_p = 9
df = data.frame(w = rep(1, participants*values_p),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
participants*items),
ID = rep(1:participants, each = values_p*participants),
gamma = rep(rnorm(participants, .44, 0.01),
each = values_p*participants),
delta = rep(rnorm(participants, .77, 0.01),
each = values_p*participants))
items = 1
participants = 10
values_p = 9
df = data.frame(w = rep(1, participants*values_p),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
participants*items),
ID = rep(1:participants, each = values_p*items),
gamma = rep(rnorm(participants, .44, 0.01),
each = values_p*items),
delta = rep(rnorm(participants, .77, 0.01),
each = values_p*items))
items = 1
participants = 10
values_p = 9
df = data.frame(w = rep(1, participants*values_p),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
participants*items),
ID = rep(1:participants, each = values_p*items),
gamma = rep(rnorm(participants, .44, 0.01),
each = values_p*items),
delta = rep(rnorm(participants, .77, 0.01),
each = values_p*items),
items = rep(1:items, each = participants*values_p))
View(df)
## Gonzalez / Wu
gonzWu <- function(delta, gamma, p){
w = (delta * (p ** gamma)) / (delta * (p ** gamma) + (1-p)**gamma)
#return(w)
}
## range of plausible values:
## delta: .77, gamma: .44 (plus, minus something).
# 10 participants
# 1 question
# 9 values of p.
items = 1
participants = 10
values_p = 9
df = data.frame(#w = rep(1, participants*values_p),
p = rep(c(0.01, 0.05, 0.15, 0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
participants*items),
ID = rep(1:participants, each = values_p*items),
gamma = rep(rnorm(participants, .44, 0.01),
each = values_p*items),
delta = rep(rnorm(participants, .77, 0.01),
each = values_p*items),
items = rep(1:items, each = participants*values_p))
#compute W in this silly manner:
dfW <- df %>%
mutate(w = gonzWu(delta, gamma, p))
View(dfW)
# plot something:
ggplot(dfW, aes(p, w, color = as.fator(ID))) %>%
geom_line(aes(group = item)) +
geom_point()
# plot something:
ggplot(dfW, aes(p, w, color = as.fator(ID))) +
geom_line(aes(group = item)) +
geom_point()
# plot something:
ggplot(dfW, aes(p, w, color = as.fator(ID))) +
geom_line(aes(group = ID)) +
geom_point()
ggplot(dfW, aes(p, w, color = as.factor(ID))) +
geom_line(aes(group = ID)) +
geom_point()
df <- genDF(items = 10, participants = 100, values_p = 9,
delta = 0.77, delta_SD = 0.1,
gamma = 0.44, gamma_SD = 0.01)
genDF <- function(items, participants, values_p,
delta, delta_SD, gamma, gamma_SD){
# create df:
df = data.frame(#w = rep(1, participants*values_p),
p = rep(c(0.01, 0.05, 0.15,
0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
participants*items),
ID = rep(1:participants, each = values_p*items),
gamma = rep(rnorm(participants, gamma, gamma_SD),
each = values_p*items),
delta = rep(rnorm(participants, delta, delta_SD),
each = values_p*items),
items = rep(1:items, each = participants*values_p))
return(df)
}
# generate DF:
df <- genDF(items = 10, participants = 100, values_p = 9,
delta = 0.77, delta_SD = 0.1,
gamma = 0.44, gamma_SD = 0.01)
# compute W in this silly manner:
dfW <- df %>%
mutate(w = gonzWu(delta, gamma, p))
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(item))) +
geom_line(aes(group = ID)) +
geom_point()
View(df)
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
geom_line(aes(group = ID)) +
geom_point()
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
geom_line(aes(group = as.factor(items))) +
geom_point()
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
geom_line(aes(group = as.factor(ID))) +
geom_point()
genDF <- function(items, participants, values_p,
delta, delta_SD, gamma, gamma_SD){
# create df:
df = data.frame(#w = rep(1, participants*values_p),
p = rep(c(0.01, 0.05, 0.15,
0.25, 0.5, 0.75, 0.85, 0.95, 0.99),
participants*items),
ID = rep(1:participants, each = values_p*items),
gamma = rep(rnorm(items, gamma, gamma_SD),
each = values_p*participants),
delta = rep(rnorm(participants, delta, delta_SD),
each = values_p*items),
items = rep(1:items, each = participants*values_p))
return(df)
}
# generate DF:
df <- genDF(items = 10, participants = 100, values_p = 9,
delta = 0.77, delta_SD = 0.1,
gamma = 0.44, gamma_SD = 0.01)
# compute W in this silly manner:
dfW <- df %>%
mutate(w = gonzWu(delta, gamma, p))
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
geom_line(aes(group = as.factor(ID))) +
geom_point()
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
#geom_line(aes(group = as.factor(ID))) +
geom_smooth()
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
#geom_line(aes(group = as.factor(ID))) +
geom_smooth() +
geom_point()
# generate DF:
df <- genDF(items = 10, participants = 100, values_p = 9,
delta = 0.77, delta_SD = 0.1,
gamma = 0.44, gamma_SD = 0.1)
# compute W in this silly manner:
dfW <- df %>%
mutate(w = gonzWu(delta, gamma, p))
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
#geom_line(aes(group = as.factor(ID))) +
geom_smooth() +
geom_point()
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
#geom_line(aes(group = as.factor(ID))) +
geom_smooth() +
#geom_point()
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
#geom_line(aes(group = as.factor(ID))) +
geom_smooth()
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
#geom_line(aes(group = as.factor(ID))) +
geom_smooth() +
geom_point()
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
#geom_line(aes(group = as.factor(ID))) +
geom_smooth() +
geom_point() +
abline(coef = c(0,1))
# plot something:
# of course the errors here make no sense..
ggplot(dfW, aes(p, w, color = as.factor(items))) +
#geom_line(aes(group = as.factor(ID))) +
geom_smooth() +
geom_point() +
geom_abline(intercept = 0, slope = 1)
setwd("C:/Users/95/Dropbox/MastersSem1/DecisionMaking/examCode")
write_csv(dfW, "sample_data.csv", row.names = FALSE)
write_csv(dfW, "sample_data.csv")
test <- read_csv("sample_data.csv")
dfW <- read_csv("sample_data.csv")
