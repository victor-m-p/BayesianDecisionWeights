var_p = seq(1, 100, by = 1)
for(one_p in var_p){
value = sapply(var_a, rottenstreich, p = one_p)
}
View(value)
var_a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 1)
View(value)
var_a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 1)
var_a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 10)
a = seq(0.01, 1, by = 0.1)
var_p = seq(1, 100, by = 10)
for(one_p in var_p){
value = sapply(a, rottenstreich, p = one_p)
}
df <- data.frame(
w = c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 0.95,
0.08, 0.12, 0.23, 0.4, 0.5, 0.8, 0.93,
0.2, 0.25, 0.30, 0.43, 0.48, 0.72, 0.92,
0.25, 0.30, 0.35, 0.45, 0.51, 0.63, 0.90),
p = c(0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99),
ID = c(rep(1, 7),
rep(2, 7),
rep(1, 7),
rep(2, 7)),
item = c(rep(1, 7),
rep(1, 7),
rep(2, 7),
rep(2, 7)),
valuence = c(rep(0.2, 7),
rep(0.2, 7),
rep(0.8, 7),
rep(0.8, 7))
)
prior1 <- prior(normal(0.5, 2), nlpar = "y") +
prior(normal(0.5, 2), nlpar = "delta")
fit1 <- brm(bf(w ~ (delta * (p ** y)) / (delta * (p **y) + (1-p)**y),
y ~ 1 + (1|ID) + (1|item),
delta ~ 1 + (1|ID) + (1|item),
nl = TRUE),
data = df, prior = prior1)
library(pacman)
p_load(tidyverse, brms)
df <- data.frame(
w = c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 0.95,
0.08, 0.12, 0.23, 0.4, 0.5, 0.8, 0.93,
0.2, 0.25, 0.30, 0.43, 0.48, 0.72, 0.92,
0.25, 0.30, 0.35, 0.45, 0.51, 0.63, 0.90),
p = c(0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99,
0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99),
ID = c(rep(1, 7),
rep(2, 7),
rep(1, 7),
rep(2, 7)),
item = c(rep(1, 7),
rep(1, 7),
rep(2, 7),
rep(2, 7)),
valuence = c(rep(0.2, 7),
rep(0.2, 7),
rep(0.8, 7),
rep(0.8, 7))
)
prior1 <- prior(normal(0.5, 2), nlpar = "y") +
prior(normal(0.5, 2), nlpar = "delta")
fit1 <- brm(bf(w ~ (delta * (p ** y)) / (delta * (p **y) + (1-p)**y),
y ~ 1 + (1|ID) + (1|item),
delta ~ 1 + (1|ID) + (1|item),
nl = TRUE),
data = df, prior = prior1)
summary(fit1)
plot(fit1)
plot(conditional_effects(fit1), points = TRUE)
library(pacman)
p_load(tidyverse, brms)
library(pacman)
p_load(tidyverse, brms)
Rstudio.version()
Rstudio.Version()
RStudio.Version()
R.Version()
citation()
RStudio.Version()
cite(package = "brms")
citation(package = "brms")
print(citation(package = "brms"), bibtex = TRUE)
print(citation(package = "brms"), bibtex = TRUE)
print(citation(package = "tidyverse"), bibtex = TRUE)
library(pacman)
p_load(tidyverse)
## rottenstreich
rottenstreich <- function(a, p){
w = p**(1-a) / (p**(1-a) + (1-p)**(1-a))
#return(w)
}
## wu
wu <- function(a, p){
w = (p**a / (p**a + (1-p)**a)**(1-a))
}
## use the functions:
est_param <- function(fun, num_a, num_p) {
a = seq(0, 1, by = num_a)
p = seq(0, 1, by = num_p)
df <- tibble(affect = numeric(),
probability = numeric(),
utility = numeric())
for(aff in a){
value = sapply(p, fun, a = aff)
df = rbind(df,
tibble(affect = rep(aff, length(p)),
probability = p,
utility = value))
}
return(df)
}
rot <- est_param(rottenstreich, 0.1, 0.01)
wuGon <- est_param(rottenstreich, 0.1, 0.01)
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}}, group = {{group}}, color = {{group}})) +
geom_line()
}
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, affect)
plotW(wuGon, probability, utility, affect)
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, affect)
plotW(wuGon, probability, utility, affect)
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, as_factor(affect))
install.packages("RColorBrewer")
p_load(tidyverse, brms, parallel, bayesplot,
RColorBrewer)
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}},
group = {{group}},
color = {{group}})) +
geom_line() +
scale_color_brewer(palette = "Dark2")
}
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, affect)
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, as_factor(affect))
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}},
group = {{group}},
color = {{group}})) +
geom_line() +
scale_color_brewer(palette = "Paired")
}
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, as_factor(affect))
plotW(wuGon, probability, utility, affect)
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, as_factor(affect))
plotW <- function(df, x, y, group){
ggplot(df, aes({{x}}, {{y}},
group = {{group}},
color = {{group}})) +
geom_line()
}
## they are the same.. (it seems): prove it.
plotW(rot, probability, utility, affect)
plotW(wuGon, probability, utility, affect)
## Gonzalez / Wu 1999:
gonzWu <- function(delta, gamma, p){
w = (delta * (p ** gamma)) / (delta * (p ** gamma) + (1-p)**gamma)
#return(w)
}
est_param <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0, 1, by = num_delta)
gamma = seq(0, 1, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
est_param2 <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0, 1, by = num_delta)
gamma = seq(0, 1, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
test <- est_param2(gonzWu, 0.1, 0.1, 0.1)
View(test)
est_param2 <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0, 2, by = num_delta)
gamma = seq(0, 2, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
test <- est_param2(gonzWu, 0.01, 0.01, 0.01)
test <- est_param2(gonzWu, 0.1, 0.1, 0.1)
head(test)
two_param <- est_param2(gonzWu, 0.1, 0.1, 0.1)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(probability, utility, group = delta,
color = delta) +
geom_line
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
two_param <- est_param2(gonzWu, 0.1, 0.1, 0.01)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
est_param2 <- function(fun, num_delta, num_gamma, num_p) {
delta = seq(0.2, 1.8, by = num_delta)
gamma = seq(0.2, 1.8, by = num_gamma)
p = seq(0, 1, by = num_p)
df <- tibble(delta = numeric(),
gamma = numeric(),
probability = numeric(),
utility = numeric())
for(g in gamma){
for(d in delta){
value = sapply(p, gonzWu, delta = d, gamma = g)
df = rbind(df,
tibble(delta = rep(d, length(p)),
gamma = rep(g, length(p)),
probability = p,
utility = value))
}
}
return(df)
}
two_param <- est_param2(gonzWu, 0.1, 0.1, 0.01)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
two_param <- est_param2(gonzWu, 0.2, 0.2, 0.001)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
two_param <- est_param2(gonzWu, 0.2, 0.2, 0.001)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
two_param <- est_param2(gonzWu,
num_delta = 0.2,
num_gamma = 0.2,
num_p = 0.001)
p <- two_param %>%
filter(gamma == 0.4) %>%
ggplot(aes(probability, utility, group = delta),
color = delta) +
geom_line()
p
library(pacman)
p_load(tidyverse)
p_load(devtools)
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.getenv("BINPREF")
install.packages("jsonlite", type = "source")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
devtools::install_github("rmcelreath/rethinking")
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
library(pacman)
p_load(tidyverse, parallel, brms)
ncores = detectCores()
setwd("C:/Users/95/BayesianDecisionWeights/Code")
readeR <- function(name){
df <- read_csv(name) %>%
rename(p = probability,
gammaT = gamma_true,
deltaT = delta_true,
gammaO = gamma_obs,
deltaO = delta_obs,
w = w_prob) %>%
mutate(ID = as_factor(ID),
item = as_factor(item))
}
df <- readeR("../Data/exp2_sim_toy.csv")
df2 <- readeR("../Data/exp2_sim_toyBIG.csv")
library(pacman)
p_load(tidyverse, brms)
setwd("C:/Users/95/BayesianDecisionWeights/Code")
mod <- readRDS("../Data/m_items_logID_huge.rds")
#http://mjskay.github.io/tidybayes/articles/tidy-brms.html
devtools::install_github("mjskay/tidybayes")
library(tidybayes)
## sample posterior
posts <- posterior_samples(mod)
## data wrangling:
posts_clean <- posts %>%
mutate(b_deltaO_item1 = exp(b_logdeltaO_item1),
b_deltaO_item2 = exp(b_logdeltaO_item2),
b_deltaO_item3 = exp(b_logdeltaO_item3)) %>%
select(c(
b_gammaO_item1,
b_gammaO_item2,
b_gammaO_item3,
b_deltaO_item1,
b_deltaO_item2,
b_deltaO_item3
))
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed")
## use the melted data to get 95% CI.
posts_melt %>%
group_by(variable, level) %>%
median_qi(cond_mean = observed)
## visualize this for gamma and delta
## .95, .66 posterior mass.
interval_plot <- function(df, variable){
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
stat_halfeye()
}
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
interval_plot(posts_melt, "delta")
## he has one more nice plot with coloring:
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
# Chunk 1
library(pacman)
p_load(tidyverse, brms)
setwd("C:/Users/95/BayesianDecisionWeights/Code")
# Chunk 2
#can also load non-big.
mod <- readRDS("../Data/m_items_logID_big.rds")
mod <- readRDS("../Data/m_items_logID2.rds")
mod <- readRDS("../Data/m_items_logID_huge.rds")
# Chunk 3
pp_check(mod) #show good fit.
(res1 <- summary(mod)) #shows sensible values.
plot(mod)
# Chunk 4
#http://mjskay.github.io/tidybayes/articles/tidy-brms.html
devtools::install_github("mjskay/tidybayes")
library(tidybayes)
## sample posterior
posts <- posterior_samples(mod)
## data wrangling:
posts_clean <- posts %>%
mutate(b_deltaO_item1 = exp(b_logdeltaO_item1),
b_deltaO_item2 = exp(b_logdeltaO_item2),
b_deltaO_item3 = exp(b_logdeltaO_item3)) %>%
select(c(
b_gammaO_item1,
b_gammaO_item2,
b_gammaO_item3,
b_deltaO_item1,
b_deltaO_item2,
b_deltaO_item3
))
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed")
## use the melted data to get 95% CI.
posts_melt %>%
group_by(variable, level) %>%
median_qi(cond_mean = observed)
## visualize this for gamma and delta
## .95, .66 posterior mass.
interval_plot <- function(df, variable){
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
stat_halfeye()
}
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
interval_plot(posts_melt, "delta")
## he has one more nice plot with coloring:
mod <- readRDS("../Data/m_items_logID2.rds")
pp_check(mod) #show good fit.
(res1 <- summary(mod)) #shows sensible values.
plot(mod)
#http://mjskay.github.io/tidybayes/articles/tidy-brms.html
devtools::install_github("mjskay/tidybayes")
library(tidybayes)
## sample posterior
posts <- posterior_samples(mod)
## data wrangling:
posts_clean <- posts %>%
mutate(b_deltaO_item1 = exp(b_logdeltaO_item1),
b_deltaO_item2 = exp(b_logdeltaO_item2),
b_deltaO_item3 = exp(b_logdeltaO_item3)) %>%
select(c(
b_gammaO_item1,
b_gammaO_item2,
b_gammaO_item3,
b_deltaO_item1,
b_deltaO_item2,
b_deltaO_item3
))
## melt the dataframe for visualization:
posts_melt <- posts_clean %>%
pivot_longer(cols = starts_with("b_"),
names_to = c("variable", "level"),
names_pattern = ("b_(.*)O_(.*)"),
values_to = "observed")
## use the melted data to get 95% CI.
posts_melt %>%
group_by(variable, level) %>%
median_qi(cond_mean = observed)
## visualize this for gamma and delta
## .95, .66 posterior mass.
interval_plot <- function(df, variable){
df %>%
filter(variable == {{variable}}) %>%
group_by(level) %>%
mutate(condition_mean = observed) %>%
ggplot(aes(y = level,
x = condition_mean)) +
stat_halfeye()
}
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
interval_plot(posts_melt, "delta")
## he has one more nice plot with coloring:
## plot both gamma and delta posteriors by item:
interval_plot(posts_melt, "gamma")
